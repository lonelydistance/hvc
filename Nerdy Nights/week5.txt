                                ; NintendoAge Nerdy Nights Week 5 - Controller
                                
                                ; modified to assemble with ASM6 (and possibly other) assemblers
                                
                                ; away with those .ines directives, this assembler will use a header instead
                                
      4E 45 53 1A               byte "NES",$1a                          ; basically "NES" plus a terminator
      01                        byte $01                                ; 1x16 PRG-ROM block ($c000)
      01                        byte $01                                ; 1 CHR-ROM block
      00                        byte $00                                ; dontcare
      00                        byte $00                                ; dontcare
      00 00 00 00 00 00 00 00   dsb 8                                   ; 8 bytes padding
                                
                                ;;;;;;;;;;;;;;;
                                
                                ; away with .bank directives
                                  .org $C000 
0C000                           RESET:
0C000 78                          SEI          ; disable IRQs
0C001 D8                          CLD          ; disable decimal mode
0C002 A2 40                       LDX #$40
0C004 8E 17 40                    STX $4017    ; disable APU frame IRQ
0C007 A2 FF                       LDX #$FF
0C009 9A                          TXS          ; Set up stack
0C00A E8                          INX          ; now X = 0
0C00B 8E 00 20                    STX $2000    ; disable NMI
0C00E 8E 01 20                    STX $2001    ; disable rendering
0C011 8E 10 40                    STX $4010    ; disable DMC IRQs
0C014                           
0C014                           vblankwait1:       ; First wait for vblank to make sure PPU is ready
0C014 2C 02 20                    BIT $2002
0C017 10 FB                       BPL vblankwait1
0C019                           
0C019                           clrmem:
0C019 A9 00                       LDA #$00
0C01B 95 00                       STA $0000, x
0C01D 9D 00 01                    STA $0100, x
0C020 9D 00 02                    STA $0200, x
0C023 9D 00 04                    STA $0400, x
0C026 9D 00 05                    STA $0500, x
0C029 9D 00 06                    STA $0600, x
0C02C 9D 00 07                    STA $0700, x
0C02F A9 FE                       LDA #$FE
0C031 9D 00 03                    STA $0300, x
0C034 E8                          INX
0C035 D0 E2                       BNE clrmem
0C037                              
0C037                           vblankwait2:      ; Second wait for vblank, PPU is ready after this
0C037 2C 02 20                    BIT $2002
0C03A 10 FB                       BPL vblankwait2
0C03C                           
0C03C                           
0C03C                           LoadPalettes:
0C03C AD 02 20                    LDA $2002             ; read PPU status to reset the high/low latch
0C03F A9 3F                       LDA #$3F
0C041 8D 06 20                    STA $2006             ; write the high byte of $3F00 address
0C044 A9 00                       LDA #$00
0C046 8D 06 20                    STA $2006             ; write the low byte of $3F00 address
0C049 A2 00                       LDX #$00              ; start out at 0
0C04B                           LoadPalettesLoop:
0C04B BD 00 E0                    LDA palette, x        ; load data from address (palette + the value in x)
0C04E                                                     ; 1st time through loop it will load palette+0
0C04E                                                     ; 2nd time through loop it will load palette+1
0C04E                                                     ; 3rd time through loop it will load palette+2
0C04E                                                     ; etc
0C04E 8D 07 20                    STA $2007             ; write to PPU
0C051 E8                          INX                   ; X = X + 1
0C052 E0 20                       CPX #$20              ; Compare X to hex $10, decimal 16 - copying 16 bytes = 4 sprites
0C054 D0 F5                       BNE LoadPalettesLoop  ; Branch to LoadPalettesLoop if compare was Not Equal to zero
0C056                                                   ; if compare was equal to 32, keep going down
0C056                           
0C056                           
0C056                           
0C056                           LoadSprites:
0C056 A2 00                       LDX #$00              ; set x to 0
0C058                           LoadSpritesLoop:
0C058 BD 20 E0                    LDA sprites, x        ; load data from address (sprites +  x)
0C05B 9D 00 02                    STA $0200, x          ; store into RAM address ($0200 + x)
0C05E E8                          INX                   ; X = X + 1
0C05F E0 20                       CPX #$20              ; Compare X to hex $20, decimal 32
0C061 D0 F5                       BNE LoadSpritesLoop   ; Branch to LoadSpritesLoop if compare was Not Equal to zero
0C063                                                   ; if compare was equal to 32, keep going down
0C063                                         
0C063                                         
0C063                           
0C063 A9 80                       LDA #%10000000   ; enable NMI, sprites from Pattern Table 1
0C065 8D 00 20                    STA $2000
0C068                           
0C068 A9 10                       LDA #%00010000   ; enable sprites
0C06A 8D 01 20                    STA $2001
0C06D                           
0C06D                           Forever:
0C06D 4C 6D C0                    JMP Forever     ;jump back to Forever, infinite loop
0C070                             
0C070                            
0C070                           
0C070                           NMI:
0C070 A9 00                       LDA #$00
0C072 8D 03 20                    STA $2003       ; set the low byte (00) of the RAM address
0C075 A9 02                       LDA #$02
0C077 8D 14 40                    STA $4014       ; set the high byte (02) of the RAM address, start the transfer
0C07A                           
0C07A                           
0C07A                           LatchController:
0C07A A9 01                       LDA #$01
0C07C 8D 16 40                    STA $4016
0C07F A9 00                       LDA #$00
0C081 8D 16 40                    STA $4016       ; tell both the controllers to latch buttons
0C084                           
0C084                           
0C084                           ReadA: 
0C084 AD 16 40                    LDA $4016       ; player 1 - A
0C087 29 01                       AND #%00000001  ; only look at bit 0
0C089                           ReadB:
0C089 AD 16 40                    LDA $4016       ; player 1 - A
0C08C 29 01                       AND #%00000001  ; only look at bit 0
0C08E                           ReadSel:
0C08E AD 16 40                    LDA $4016       ; player 1 - A
0C091 29 01                       AND #%00000001  ; only look at bit 0
0C093                           ReadSta:
0C093 AD 16 40                    LDA $4016       ; player 1 - A
0C096 29 01                       AND #%00000001  ; only look at bit 0
0C098                             ReadD:
0C098 AD 16 40                    LDA $4016       ; player 1 - A
0C09B 29 01                       AND #%00000001  ; only look at bit 0
0C09D F0 24                       BEQ ReadDDone   ; branch to ReadBDone if button is NOT pressed (0)
0C09F                                             ; add instructions here to do something when button IS pressed (1)
0C09F AD 00 02                    LDA $0200      ; load sprite X position
0C0A2 38                          SEC             ; make sure carry flag is set
0C0A3 E9 01                       SBC #$01        ; A = A - 1
0C0A5 8D 00 02                    STA $0200       ; save sprite X position
0C0A8 AD 04 02                    LDA $0204       ; load sprite X position
0C0AB 38                          SEC             ; make sure carry flag is set
0C0AC E9 01                       SBC #$01        ; A = A - 1
0C0AE 8D 04 02                    STA $0204       ; save sprite X position
0C0B1 AD 08 02                    LDA $0208       ; load sprite X position
0C0B4 38                          SEC             ; make sure carry flag is set
0C0B5 E9 01                       SBC #$01        ; A = A - 1
0C0B7 8D 08 02                    STA $0208      ; save sprite X position
0C0BA AD 0C 02                    LDA $020C       ; load sprite X position
0C0BD 38                          SEC             ; make sure carry flag is set
0C0BE E9 01                       SBC #$01        ; A = A - 1
0C0C0 8D 0C 02                    STA $020C       ; save sprite X position
0C0C3                           ReadDDone:        ; handling this button is done
0C0C3                           ReadU:
0C0C3 AD 16 40                    LDA $4016       ; player 1 - R
0C0C6 29 01                       AND #%00000001  ; only look at bit 0
0C0C8 F0 24                       BEQ ReadUDone   ; branch to ReadADone if button is NOT pressed (0)
0C0CA                                             ; add instructions here to do something when button IS pressed (1)
0C0CA AD 00 02                    LDA $0200
0C0CD 18                          CLC             ; make sure the carry flag is clear
0C0CE 69 01                       ADC #$01        ; A = A + 1
0C0D0 8D 00 02                    STA $0200
0C0D3 AD 04 02                    LDA $0204
0C0D6 18                          CLC             ; make sure the carry flag is clear
0C0D7 69 01                       ADC #$01        ; A = A + 1
0C0D9 8D 04 02                    STA $0204
0C0DC AD 08 02                    LDA $0208
0C0DF 18                          CLC             ; make sure the carry flag is clear
0C0E0 69 01                       ADC #$01        ; A = A + 1
0C0E2 8D 08 02                    STA $0208
0C0E5 AD 0C 02                    LDA $020C
0C0E8 18                          CLC             ; make sure the carry flag is clear
0C0E9 69 01                       ADC #$01        ; A = A + 1
0C0EB 8D 0C 02                    STA $020C ; load sprite X position
0C0EE                           ReadUDone:
0C0EE                           
0C0EE                           
0C0EE                             ReadL: 
0C0EE AD 16 40                    LDA $4016       ; player 1 - B
0C0F1 29 01                       AND #%00000001  ; only look at bit 0
0C0F3 F0 24                       BEQ ReadLDone   ; branch to ReadBDone if button is NOT pressed (0)
0C0F5                                             ; add instructions here to do something when button IS pressed (1)
0C0F5 AD 03 02                    LDA $0203       ; load sprite X position
0C0F8 38                          SEC             ; make sure carry flag is set
0C0F9 E9 01                       SBC #$01        ; A = A - 1
0C0FB 8D 03 02                    STA $0203       ; save sprite X position
0C0FE AD 07 02                    LDA $0207       ; load sprite X position
0C101 38                          SEC             ; make sure carry flag is set
0C102 E9 01                       SBC #$01        ; A = A - 1
0C104 8D 07 02                    STA $0207       ; save sprite X position
0C107 AD 0B 02                    LDA $020B       ; load sprite X position
0C10A 38                          SEC             ; make sure carry flag is set
0C10B E9 01                       SBC #$01        ; A = A - 1
0C10D 8D 0B 02                    STA $020B      ; save sprite X position
0C110 AD 0F 02                    LDA $020F       ; load sprite X position
0C113 38                          SEC             ; make sure carry flag is set
0C114 E9 01                       SBC #$01        ; A = A - 1
0C116 8D 0F 02                    STA $020F       ; save sprite X position
0C119                           ReadLDone:        ; handling this button is done
0C119                             
0C119                             ReadR:  
0C119 AD 16 40                    LDA $4016       ; player 1 - R
0C11C 29 01                       AND #%00000001  ; only look at bit 0
0C11E F0 24                       BEQ ReadRDone   ; branch to ReadADone if button is NOT pressed (0)
0C120                                             ; add instructions here to do something when button IS pressed (1)
0C120 AD 03 02                    LDA $0203
0C123 18                          CLC             ; make sure the carry flag is clear
0C124 69 01                       ADC #$01        ; A = A + 1
0C126 8D 03 02                    STA $0203
0C129 AD 07 02                    LDA $0207
0C12C 18                          CLC             ; make sure the carry flag is clear
0C12D 69 01                       ADC #$01        ; A = A + 1
0C12F 8D 07 02                    STA $0207
0C132 AD 0B 02                    LDA $020B
0C135 18                          CLC             ; make sure the carry flag is clear
0C136 69 01                       ADC #$01        ; A = A + 1
0C138 8D 0B 02                    STA $020B
0C13B AD 0F 02                    LDA $020F
0C13E 18                          CLC             ; make sure the carry flag is clear
0C13F 69 01                       ADC #$01        ; A = A + 1
0C141 8D 0F 02                    STA $020F ; load sprite X position
0C144                           
0C144                           ReadRDone:        ; handling this button is done
0C144                             
0C144                           
0C144                           
0C144                           
0C144                           
0C144                             
0C144 40                          RTI             ; return from interrupt
0C145                            
0C145                           ;;;;;;;;;;;;;;  
0C145                             
0C145                             
0C145                             
0C145                           
0C145 00 00 00 00 00 00 00 00..   .org $E000
0E000                           palette:
0E000 0F 31 32 33 34 35 36 37..   .db $0F,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3A,$3B,$3C,$3D,$3E,$0F
0E010 0F 1C 15 14 31 02 38 3C..   .db $0F,$1C,$15,$14,$31,$02,$38,$3C,$0F,$1C,$15,$14,$31,$02,$38,$3C
0E020                           
0E020                           sprites:
0E020                                ;vert tile attr horiz
0E020 80 32 00 80                 .db $80, $32, $00, $80   ;sprite 0
0E024 80 33 00 88                 .db $80, $33, $00, $88   ;sprite 1
0E028 88 34 00 80                 .db $88, $34, $00, $80   ;sprite 2
0E02C 88 35 00 88                 .db $88, $35, $00, $88   ;sprite 3
0E030                           
0E030 00 00 00 00 00 00 00 00..   .org $FFFA     ;first of the three vectors starts here
0FFFA 70 C0                       .dw NMI        ;when an NMI happens (once per frame if enabled) the 
0FFFC                                              ;processor will jump to the label NMI:
0FFFC 00 C0                       .dw RESET      ;when the processor first turns on or is reset, it will jump
0FFFE                                              ;to the label RESET:
0FFFE 00 00                       .dw 0          ;external interrupt IRQ is not used in this tutorial
10000                             
10000                             
10000                           ;;;;;;;;;;;;;;  
10000                           
10000 03 0F 1F 1F 1C 24 26 66..   .incbin "mario.chr"   ;includes 8KB graphics file from SMB1